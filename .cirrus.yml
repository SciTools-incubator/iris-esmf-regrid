# Reference:
#   - https://cirrus-ci.org/guide/writing-tasks/
#   - https://cirrus-ci.org/guide/linux/
#   - https://cirrus-ci.org/guide/macOS/
#   - https://cirrus-ci.org/guide/windows/
#   - https://hub.docker.com/_/gcc/
#   - https://hub.docker.com/_/python/

#
# Global defaults.
#
container:
  image: python:3.10
  cpu: 2
  memory: 4G

env:
  # Skip specific tasks by name. Set to a non-empty string to skip.
  SKIP_LINT_TASK: ""
  SKIP_TEST_TASK: ""
  SKIP_BENCHMARK_TASK: ""
  # Maximum cache period (in weeks) before forcing a new cache upload.
  CACHE_PERIOD: "0"
  # Increment the build number to force new conda cache upload.
  CONDA_CACHE_BUILD: "1"
  # Increment the build number to force new nox cache upload.
  NOX_CACHE_BUILD: "3"
  # Increment the build number to force new pip cache upload.
  PIP_CACHE_BUILD: "0"
  # Pip package to be installed.
  PIP_CACHE_PACKAGES: "pip setuptools wheel nox pyyaml"
  # Conda packages to be installed.
  CONDA_CACHE_PACKAGES: "nox pip pyyaml"
  # Use specific custom iris source feature branch.
  IRIS_SOURCE: "github:main"
  # Git commit hash for iris test data.
  IRIS_TEST_DATA_VERSION: "2.2"
  # Base directory for the iris-test-data.
  IRIS_TEST_DATA_DIR: ${HOME}/iris-test-data
  OVERRIDE_TEST_DATA_REPOSITORY: ${IRIS_TEST_DATA_DIR}/test_data


#
# YAML alias for the iris-test-data cache.
#
iris_test_data_template: &IRIS_TEST_DATA_TEMPLATE
  data_cache:
    folder: ${IRIS_TEST_DATA_DIR}
    fingerprint_script:
      - echo "iris-test-data v${IRIS_TEST_DATA_VERSION}"
    populate_script:
      - wget --quiet https://github.com/SciTools/iris-test-data/archive/v${IRIS_TEST_DATA_VERSION}.zip -O iris-test-data.zip
      - unzip -q iris-test-data.zip
      - mv iris-test-data-${IRIS_TEST_DATA_VERSION} ${IRIS_TEST_DATA_DIR}


#
# YAML alias for common linux test infra-structure.
#
LINUX_CONDA_TEMPLATE: &LINUX_CONDA_TEMPLATE
  auto_cancellation: true
  container:
    image: gcc:latest
  env:
    PATH: ${HOME}/miniconda/bin:${PATH}
  conda_cache:
    folder: ${HOME}/miniconda
    fingerprint_script:
      - wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
      - echo "${CIRRUS_OS} $(sha256sum miniconda.sh)"
      - echo "${CONDA_CACHE_PACKAGES}"
      - echo "$(date +%Y).$(expr $(date +%U) / ${CACHE_PERIOD}):${CONDA_CACHE_BUILD}"
      - uname -r
    populate_script:
      - export CONDA_OVERRIDE_LINUX="$(uname -r | cut -d'+' -f1)"
      - bash miniconda.sh -b -p ${HOME}/miniconda
      - conda config --set always_yes yes --set changeps1 no
      - conda config --set show_channel_urls True
      - conda config --add channels conda-forge
      - conda update --quiet --name base conda
      - conda install --quiet --name base ${CONDA_CACHE_PACKAGES}


#
# Linting
#
lint_task:
  only_if: ${SKIP_LINT_TASK} == ""
  auto_cancellation: true
  name: "${CIRRUS_OS}: flake8 and black"
  pip_cache:
    folder: ~/.cache/pip
    fingerprint_script:
      - echo "${CIRRUS_TASK_NAME} py${PYTHON_VERSION}"
      - echo "${PIP_CACHE_PACKAGES}"
      - echo "$(date +%Y).$(expr $(date +%U) / ${CACHE_PERIOD}):${PIP_CACHE_BUILD}"
  lint_script:
    - pip list
    - python -m pip install --retries 3 --upgrade ${PIP_CACHE_PACKAGES}
    - pip list
    - nox --session flake8
    - nox --session black


#
# Testing (Linux)
#
test_task:
  only_if: ${SKIP_TEST_TASK} == ""
  auto_cancellation: true
  matrix:
    env:
      PY_VER: "3.8"
    env:
      PY_VER: "3.9"
    env:
      PY_VER: "3.10"
      COVERAGE: "true"
  name: "${CIRRUS_OS}: py${PY_VER} tests"
  << : *LINUX_CONDA_TEMPLATE
  nox_cache:
    folder: ${CIRRUS_WORKING_DIR}/.nox
    reupload_on_changes: true
    fingerprint_script:
      - echo "${CIRRUS_TASK_NAME}"
      - echo "${NOX_CACHE_BUILD}"
      - if [ -n "${IRIS_SOURCE}" ]; then echo "${IRIS_SOURCE}"; fi
  << : *IRIS_TEST_DATA_TEMPLATE
  test_script:
    - export CONDA_OVERRIDE_LINUX="$(uname -r | cut -d'+' -f1)"
    - nox --session tests -- --verbose


#
# Performance Benchmarking (Linux)
#
benchmark_task:
  only_if: ${SKIP_BENCHMARK_TASK} == ""
  auto_cancellation: true
  env:
    PY_VER: "3.10"
  name: "${CIRRUS_OS}: performance benchmarking"
  # Custom clone behaviour to enable ASV to access the PR base branch (if on a
  #  PR).
  clone_script: |
    if [ -z "$CIRRUS_PR" ]; then
      git clone --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    else
      git clone --recursive https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git fetch origin pull/${CIRRUS_PR}/head:pull/${CIRRUS_PR}
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    fi
  << : *LINUX_CONDA_TEMPLATE
  asv_cache:
    folder: ${CIRRUS_WORKING_DIR}/benchmarks/.asv/env
    reupload_on_changes: true
    fingerprint_script:
      - echo "${CIRRUS_TASK_NAME}"
      - if [ -n "${IRIS_SOURCE}" ]; then echo "${IRIS_SOURCE}"; fi
  nox_cache:
    folder: ${CIRRUS_WORKING_DIR}/.nox
    reupload_on_changes: true
    fingerprint_script:
      - echo "${CIRRUS_TASK_NAME}"
      - echo "${NOX_CACHE_BUILD}"
      - if [ -n "${IRIS_SOURCE}" ]; then echo "${IRIS_SOURCE}"; fi
  benchmarks_script:
    - if [ -z "$CIRRUS_BASE_SHA" ]; then export COMPARE="HEAD~" else export COMPARE="${CIRRUS_BASE_SHA}" fi
    - export CONDA_OVERRIDE_LINUX="$(uname -r | cut -d'+' -f1)"
    - nox --session=tests --install-only
    - export DATA_GEN_PYTHON=$(realpath $(find .nox -path "*tests*bin/python"))
    - nox --no-reuse-existing-virtualenvs --session="benchmarks(branch)" -- "${COMPARE}"
